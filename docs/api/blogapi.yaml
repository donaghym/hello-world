---
openapi: 3.0.0
info:
  title: blog
  description: |-
    Blog API for REST API Technical Skills Exercise Practice.  Not intended for production use.

    A Blog can have multiple blog posts/entries.
    For "corporate blogs", a blog may allow multiple bloggers to post to a blog.
    API Definition created using APICURIO.

    This version of the API doesn't deal with comments or address security/authentication, but plan to add it as my journey evolves
  contact:
    name: Michael Donaghy
    url:
    email: michaeld@michaeldonaghy.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 0.0.2
paths:
  /users/{userId}:
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
  /users/{userId}/blogEntries:
    get:
      description: Get a list of blog posts authored by this user
    parameters:
    - name: userId
      in: path
      required: true
      schema:
        type: string
  /blogpost/:
    get:
      parameters:
      - name: tags
        in: query
        description: Search by Tag
        schema:
          type: string
      - name: title
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPostSummary'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      responses:
        201: {}
  /blogpost/{postId}/:
    get:
      description: Get Blog Post
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    put:
      description: Update Blog Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      responses:
        204: {}
    delete:
      description: Delete Blog Post
      responses:
        204: {}
    parameters:
    - name: postId
      in: path
      description: Blog Post ID
      required: true
      schema:
        type: integer
  /blogs:
    get:
      description: List of Blogs on the System
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/blog'
    post:
      description: Create a new Blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog'
        required: true
      responses:
        201: {}
  /blogs/{shortName}:
    get:
      description: Get the Details about a Blog
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog'
    put:
      description: Update a Blog
      requestBody:
        description: Update a Blog's Details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog'
        required: true
      responses:
        204: {}
    delete:
      description: Delete a Blog
      responses:
        204: {}
    parameters:
    - name: shortName
      in: path
      description: Blog's Short Name
      required: true
      schema:
        type: string
  /blogs/{shortName}/posts:
    get:
      description: Get the Details about a Blog
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPostSummary'
    parameters:
    - name: shortName
      in: path
      description: Blog's Short Name
      required: true
      schema:
        type: string
components:
  schemas:
    BlogPost:
      title: Root Type for Post
      description: The root of the Post type's schema.
      required:
      - content
      - title
      - blogShortName
      type: object
      properties:
        postAuthor:
          type: string
        postAuthorId:
          type: integer
        title:
          type: string
        content:
          type: string
        datePosted:
          format: date
          type: string
        dateModified:
          format: date
          type: string
        tags:
          type: array
          items:
            type: string
        blogShortName:
          type: string
    BlogPostSummary:
      title: Root Type for Post
      description: The root of the Post type's schema.
      required:
      - content
      - title
      type: object
      properties:
        postAuthor:
          type: string
        title:
          type: string
        datePosted:
          format: date
          type: string
        tags:
          type: array
          items:
            type: string
    Blogger:
      required:
      - email
      - Name
      properties:
        userId:
          type: integer
        email:
          type: string
        Name:
          type: string
    blog:
      required:
      - shortName
      properties:
        Blog Name: {}
        Blog Description: {}
        shortName:
          description: Blog Short Name;  Appears in URL.  Shouldn't have spaces or
            special characters
          type: string
        authorizedPosters:
          type: array
          items:
            type: integer
